apiVersion: v1
kind: ConfigMap
metadata:
  name: authelia-config
  namespace: authelia
data:
  configuration.yml: |
    ###############################################################
    #                   Authelia configuration                    #
    ###############################################################

    # The host and port to listen on
    host: 0.0.0.0
    port: 9091
    # tls_key: /var/lib/authelia/ssl/key.pem
    # tls_cert: /var/lib/authelia/ssl/cert.pem

    # Level of verbosity for logs: info, debug, trace
    log_level: info
    ## File path where the logs will be written. If not set logs are written to stdout.
    # log_file_path: /var/log/authelia

    # Default redirection URL
    #
    # If user tries to authenticate without any referer, Authelia
    # does not know where to redirect the user to at the end of the
    # authentication process.
    # This parameter allows you to specify the default redirection
    # URL Authelia will use in such a case.
    #
    # Note: this parameter is optional. If not provided, user won't
    # be redirected upon successful authentication.
    default_redirection_url: https://authelia.sost.ovh/

    # Google Analytics Tracking ID to track the usage of the portal
    # using a Google Analytics dashboard.
    #
    ## google_analytics: UA-00000-01

    # TOTP Settings
    #
    # Parameters used for TOTP generation
    totp:
      # The issuer name displayed in the Authenticator application of your choice
      # See: https://github.com/google/google-authenticator/wiki/Key-Uri-Format for more info on issuer names
      issuer: authelia
      # The period in seconds a one-time password is current for. Changing this will require all users to register
      # their TOTP applications again.
      # Warning: before changing period read the docs link below.
      period: 30
      # The skew controls number of one-time passwords either side of the current one that are valid.
      # Warning: before changing skew read the docs link below.
      skew: 1
      #  See: https://docs.authelia.com/configuration/one-time-password.html#period-and-skew to read the documentation.

    # Duo Push API
    #
    # Parameters used to contact the Duo API. Those are generated when you protect an application
    # of type "Partner Auth API" in the management panel.
    # duo_api:
    #   hostname: api-123456789.example.com
    #   integration_key: ABCDEF
    #   # This secret can also be set using the env variables AUTHELIA_DUO_API_SECRET_KEY
    #   secret_key: 1234567890abcdefghifjkl

    # The authentication backend to use for verifying user passwords
    # and retrieve information such as email address and groups
    # users belong to.
    #
    # There are two supported backends: 'ldap' and 'file'.
    authentication_backend:
      # Disable both the HTML element and the API for reset password functionality
      disable_reset_password: true
      file:
        path: /etc/authelia/users.yaml
        password:
          algorithm: sha512
          iterations: 50000
          salt_length: 16
          parallelism: 8
          memory: 1024

    access_control:
      # Default policy can either be 'bypass', 'one_factor', 'two_factor' or 'deny'.
      # It is the policy applied to any resource if there is no policy to be applied
      # to the user.
      default_policy: deny

      rules:
        # Rules applied to everyone
        - domain: public.example.com
          policy: bypass

        - domain: secure.example.com
          policy: one_factor
          # Network based rule, if not provided any network matches.
          networks:
            - 192.168.1.0/24
        - domain: secure.example.com
          policy: two_factor

        - domain: singlefactor.example.com
          policy: one_factor

        - domain: nginx.sost.ovh
          policy: one_factor

        - domain: "*.sost.ovh"
          subject: "group:admins"
          policy: two_factor

    # Configuration of session cookies
    #
    # The session cookies identify the user once logged in.
    session:
      # The name of the session cookie. (default: authelia_session).
      name: authelia_session

      # The secret to encrypt the session data. This is only used with Redis.
      # This secret can also be set using the env variables AUTHELIA_SESSION_SECRET
      secret: DpZzuend8o5WnRZQmBVLhm0GmDFwQaaRCln7jXehIx6Nlmjf2pgVEBzszba8+3lK

      # The time in seconds before the cookie expires and session is reset.
      expiration: 1h

      # The inactivity time in seconds before the session is reset.
      inactivity: 5m

      # The remember me duration.
      # Value of 0 disables remember me.
      # Value is in seconds, or duration notation. See: https://docs.authelia.com/configuration/index.html#duration-notation-format
      # Longer periods are considered less secure because a stolen cookie will last longer giving attackers more time to spy
      # or attack. Currently the default is 1M or 1 month.
      remember_me_duration: 1M

      # The domain to protect.
      # Note: the authenticator must also be in that domain. If empty, the cookie
      # is restricted to the subdomain of the issuer.
      domain: sost.ovh

      # The redis connection details
      redis:
        host: redis-master.redis.svc.cluster.local
        port: 6379
        # This secret can also be set using the env variables AUTHELIA_SESSION_REDIS_PASSWORD
        # password: authelia
        # This is the Redis DB Index https://redis.io/commands/select (sometimes referred to as database number, DB, etc).
        database_index: 0

    # Configuration of the authentication regulation mechanism.
    #
    # This mechanism prevents attackers from brute forcing the first factor.
    # It bans the user if too many attempts are done in a short period of
    # time.
    regulation:
      # The number of failed login attempts before user is banned.
      # Set it to 0 to disable regulation.
      max_retries: 3

      # The time range during which the user can attempt login before being banned.
      # The user is banned if the authentication failed 'max_retries' times in a 'find_time' seconds window.
      # Find Time accepts duration notation. See: https://docs.authelia.com/configuration/index.html#duration-notation-format
      find_time: 2m

      # The length of time before a banned user can login again.
      # Ban Time accepts duration notation. See: https://docs.authelia.com/configuration/index.html#duration-notation-format
      ban_time: 5m

    # Configuration of the storage backend used to store data and secrets.
    #
    # You must use only an available configuration: local, mysql, postgres
    storage:
      # The directory where the DB files will be saved
      local:
        path: /var/lib/authelia/db.sqlite3

      # Settings to connect to MySQL server
      # mysql:
      #   host: 127.0.0.1
      #   port: 3306
      #   database: authelia
      #   username: authelia
      #   # This secret can also be set using the env variables AUTHELIA_STORAGE_MYSQL_PASSWORD
      #   password: mypassword

      # Settings to connect to PostgreSQL server
      # postgres:
      #   host: 127.0.0.1
      #   port: 5432
      #   database: authelia
      #   username: authelia
      #   # This secret can also be set using the env variables AUTHELIA_STORAGE_POSTGRES_PASSWORD
      #   password: mypassword

    # Configuration of the notification system.
    #
    # Notifications are sent to users when they require a password reset, a u2f
    # registration or a TOTP registration.
    # Use only an available configuration: filesystem, gmail
    notifier:
      # For testing purpose, notifications can be sent in a file
      filesystem:
        filename: /tmp/authelia/notification.txt

      # Use a SMTP server for sending notifications. Authelia uses PLAIN or LOGIN method to authenticate.
      # [Security] By default Authelia will:
      #   - force all SMTP connections over TLS including unauthenticated connections
      #      - use the disable_require_tls boolean value to disable this requirement (only works for unauthenticated connections)
      #   - validate the SMTP server x509 certificate during the TLS handshake against the hosts trusted certificates
      #     - trusted_cert option:
      #       - this is a string value, that may specify the path of a PEM format cert, it is completely optional
      #       - if it is not set, a blank string, or an invalid path; will still trust the host machine/containers cert store
      #     - defaults to the host machine (or docker container's) trusted certificate chain for validation
      #     - use the trusted_cert string value to specify the path of a PEM format public cert to trust in addition to the hosts trusted certificates
      #     - use the disable_verify_cert boolean value to disable the validation (prefer the trusted_cert option as it's more secure)
      # smtp:
      #   username: test
      #   # This secret can also be set using the env variables AUTHELIA_NOTIFIER_SMTP_PASSWORD
      #   password: password
      #   host: 127.0.0.1
      #   port: 1025
      #   sender: admin@example.com
      #   # Subject configuration of the emails sent.
      #   # {title} is replaced by the text from the notifier
      #   subject: "[Authelia] {title}"
      #   ## disable_require_tls: false
      #   ## disable_verify_cert: false
      #   ## trusted_cert: ""

      # Sending an email using a Gmail account is as simple as the next section.
      # You need to create an app password by following: https://support.google.com/accounts/answer/185833?hl=en
      ## smtp:
      ##   username: myaccount@gmail.com
      ##   # This secret can also be set using the env variables AUTHELIA_NOTIFIER_SMTP_PASSWORD
      ##   password: yourapppassword
      ##   sender: admin@example.com
      ##   host: smtp.gmail.com
      ##   port: 587
